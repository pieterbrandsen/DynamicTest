@page "/"
@*
@using Syncfusion.Blazor.Grids


$1$ <SfGrid DataSource="@Orders" AllowPaging="true" AllowSorting="true" EnableHover="true"  Width="auto" Toolbar="@(new List<string> { "Search" })" > #1#
<div class="col-lg-12 control-section">
<div class="content-wrapper">
    <div class="row">
        @if (Orders != null) {
        <SfGrid DataSource="@Orders" Height="410" Width="auto" EnableHover="false" EnableVirtualization="true" EnableColumnVirtualization="true">
            <GridPageSettings PageSize="25"></GridPageSettings>
            <GridColumns>
                $1$ <GridColumn Field=@nameof(Order.OrderId) HeaderText="Order ID"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.CustomerId) HeaderText="Customer Name"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" ></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                <GridColumn Field="CustomerId" HeaderText="CustomerId" TextAlign="TextAlign.Right"></GridColumn>
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight3" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
                $1$ <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight4" Format="C2" TextAlign="TextAlign.Right"></GridColumn> #1#
            </GridColumns>
        </SfGrid>
        }
    </div>
</div>
</div>  

@code{
    private List<Order> Orders { get; set; }

protected override void OnInitialized()
{
    Orders = Enumerable.Range(1, 75).Select(x => new Order()
    {
        OrderId = 1000 + x,
        CustomerId = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
        Freight = 2.1 * x,
        OrderDate = DateTime.Now.AddDays(-x),
    }).ToList();
}

public class Order {
    public int? OrderId { get; set; }
    public string CustomerId { get; set; }
    public DateTime? OrderDate { get; set; }
    public double? Freight { get; set; }
}
}
*@


<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            @{
                if (Data)
                {
                    <span id="initialload" class="topload">Loading 10,000 Rows and 20 Columns</span>
                    <div class="loading">
                        <span id="spancontrol" class="visible">Generating Data </span>
                    </div>
                } else {
                    <span id="afterload" class="topload">Loaded 10,000 Rows and 20 Columns</span>
                }
             }
        <SfGrid DataSource="@GridData" Height="410" Width="auto" EnableHover="false" EnableVirtualization="true" EnableColumnVirtualization="true" >
            <GridPageSettings PageSize="80"></GridPageSettings>
            <GridColumns>
                <GridColumn Field="Field1" HeaderText="PlayerName" Width="120"></GridColumn>
                <GridColumn Field="Field2" HeaderText="Year" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field3" HeaderText="Stint" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field4" HeaderText="TMID" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field5" HeaderText="LGID" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field6" HeaderText="GP" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field7" HeaderText="GS" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field8" HeaderText="Minutes" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field9" HeaderText="Points" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field10" HeaderText="oRebounds" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field11" HeaderText="dRebounds" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field12" HeaderText="Rebounds" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field13" HeaderText="Assists" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field14" HeaderText="Steals" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field15" HeaderText="Blocks" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field16" HeaderText="TurnOvers" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field17" HeaderText="PF" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field18" HeaderText="fgAttempted" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field19" HeaderText="fgMade" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field20" HeaderText="ftAttempted" TextAlign="TextAlign.Right" Width="150"></GridColumn>
            </GridColumns>
        </SfGrid>
        </div>
    </div>
</div>


<style>
    .visible {
        display: inline-block;
        font-size: 18px;
        color: rgba(0,0,0,1);
    }

    .loading {
        position: absolute;
        height: 92%;
        width: 100%;
        background-color: rgba(1,1,1,0.2);
        z-index: 10000;
        display: flex;
        align-items: center;
        padding-left: 44%;
    }

    .topload {
        font-size : 15px;
    }
</style>
@code{

    public List<VirtualData> GridData { get; set; } = new List<VirtualData>();

    public Boolean Data = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        GridData = await GetAllRecords();
        Data = false;
    }

    public async Task<List<VirtualData>> GetAllRecords()
    {

        List<VirtualData> data = new List<VirtualData>(10000);
        Random random = new Random();
        await Task.Delay(10);
        string[] name = new string[]
        {
            "hardire", "abramjo01", "aubucch01", "Hook", "Rumpelstiltskin", "Belle", "Emma", "Regina", "Aurora", "Elsa",
            "Anna", "Snow White", "Prince Charming", "Cora", "Zelena", "August", "Mulan", "Graham", "Discord", "Will", "Robin Hood",
            "Jiminy Cricket", "Henry", "Neal", "Red", "Aaran", "Aaren", "Aarez", "Aarman", "Aaron", "Aaron-James", "Aarron", "Aaryan", "Aaryn",
            "Aayan", "Aazaan", "Abaan", "Abbas", "Abdallah", "Abdalroof", "Abdihakim", "Abdirahman", "Abdisalam", "Abdul", "Abdul-Aziz",
            "Abdulbasir", "Abdulkadir", "Abdulkarem", "Abdulkhader", "Abdullah", "Abdul-Majeed", "Abdulmalik", "Abdul-Rehman", "Abdur",
            "Abdurraheem", "Abdur-Rahman", "Abdur-Rehmaan", "Abel", "Abhinav", "Abhisumant", "Abid", "Abir", "Abraham", "Abu", "Abubakar",
            "Ace", "Adain", "Adam", "Adam-James", "Addison", "Addisson", "Adegbola", "Adegbolahan", "Aden", "Adenn", "Adie", "Adil", "Aditya",
            "Adnan", "Adrian", "Adrien", "Aedan", "Aedin", "Aedyn", "Aeron", "Afonso", "Ahmad", "Ahmed", "Ahmed-Aziz", "Ahoua", "Ahtasham",
            "Aiadan", "Aidan", "Aiden", "Aiden-Jack", "Aiden-Vee"
        };
        for (int i = 0; i < 10000; i++)
        {
            string Field1 = name[random.Next(96)];
            int Field2 = 1967 + (i % 10);
            int Field3 = (int) Math.Floor(random.NextDouble() * 200);
            int Field4 = (int) Math.Floor(random.NextDouble() * 100);
            int Field5 = (int) Math.Floor(random.NextDouble() * 2000);
            int Field6 = (int) Math.Floor(random.NextDouble() * 1000);
            int Field7 = (int) Math.Floor(random.NextDouble() * 100);
            int Field8 = (int) Math.Floor(random.NextDouble() * 10);
            int Field9 = (int) Math.Floor(random.NextDouble() * 10);
            int Field10 = (int) Math.Floor(random.NextDouble() * 100);
            int Field11 = (int) Math.Floor(random.NextDouble() * 100);
            int Field12 = (int) Math.Floor(random.NextDouble() * 1000);
            int Field13 = (int) Math.Floor(random.NextDouble() * 10);
            int Field14 = (int) Math.Floor(random.NextDouble() * 10);
            int Field15 = (int) Math.Floor(random.NextDouble() * 1000);
            int Field16 = (int) Math.Floor(random.NextDouble() * 200);
            int Field17 = (int) Math.Floor(random.NextDouble() * 300);
            int Field18 = (int) Math.Floor(random.NextDouble() * 400);
            int Field19 = (int) Math.Floor(random.NextDouble() * 500);
            int Field20 = (int) Math.Floor(random.NextDouble() * 700);
            data.Add(new VirtualData(Field1, Field2, Field3, Field4, Field5, Field6, Field7, Field8, Field9, Field10, Field11,
                Field12, Field13, Field14, Field15, Field16, Field17, Field18, Field19, Field20));
        }
        return data;
    }

    public class VirtualData
    {
        public string Field1 { get; set; }
        public int Field2 { get; set; }
        public int Field3 { get; set; }
        public int Field4 { get; set; }
        public int Field5 { get; set; }
        public int Field6 { get; set; }
        public int Field7 { get; set; }
        public int Field8 { get; set; }
        public int Field9 { get; set; }
        public int Field10 { get; set; }
        public int Field11 { get; set; }
        public int Field12 { get; set; }
        public int Field13 { get; set; }
        public int Field14 { get; set; }
        public int Field15 { get; set; }
        public int Field16 { get; set; }
        public int Field17 { get; set; }
        public int Field18 { get; set; }
        public int Field19 { get; set; }
        public int Field20 { get; set; }

        public VirtualData(string Field1, int Field2, int Field3, int Field4, int Field5, int Field6, int Field7
            , int Field8, int Field9, int Field10, int Field11, int Field12, int Field13, int Field14, int Field15,
            int Field16, int Field17, int Field18, int Field19, int Field20)
        {
            this.Field1 = Field1;
            this.Field2 = Field2;
            this.Field3 = Field3;
            this.Field4 = Field4;
            this.Field5 = Field5;
            this.Field6 = Field6;
            this.Field7 = Field7;
            this.Field8 = Field8;
            this.Field9 = Field9;
            this.Field10 = Field10;
            this.Field11 = Field11;
            this.Field12 = Field12;
            this.Field13 = Field13;
            this.Field14 = Field14;
            this.Field15 = Field15;
            this.Field16 = Field16;
            this.Field17 = Field17;
            this.Field18 = Field18;
            this.Field19 = Field19;
            this.Field20 = Field20;
        }

    }

}

